#!/bin/bash

set -e

ARCH="$1"
CONFIG_FILE="$2"

# e.g.:
#
# P="llvm-x.y.z"
# PV="x.y.z"
# RUYI_DATESTAMP=yyyymmdd
# SRC_URI="https://github.com/llvm/llvm-project/releases/download/llvmorg-${PV}/llvm-project-${PV}.src.tar.xz"
source "$CONFIG_FILE"

USE_MEM=true
if $USE_MEM; then
    TMP=/tmp/mem  # mounted by outer script
else
    TMP=/tmp
fi

SRC_DIR="${TMP}/llvm-src"
INSTALL_ROOT=${TMP}/prefix/"$P"

HOST_STATIC_LIB_ROOT="/usr/lib/x86_64-linux-gnu"
HOST_EXTRA_LIB_ROOT="/opt/morelibs/${ARCH}/lib"

CMAKE_ARGS=(
    -G Ninja
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX="$INSTALL_ROOT"
    -DCMAKE_C_COMPILER=clang
    -DCMAKE_CXX_COMPILER=clang++
    -DCMAKE_C_FLAGS="-O2 -pipe -fPIC"
    -DCMAKE_CXX_FLAGS="-O2 -pipe -fPIC"
    -DLLVM_USE_LINKER=lld
    -DLLVM_ENABLE_LTO=Thin
    -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc)
    -DLLVM_PARALLEL_LINK_JOBS=4
    -DLLVM_SOURCE_PREFIX="$SRC_DIR"
    -DLLVM_USE_RELATIVE_PATHS_IN_FILES=ON
    -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO=ON

    -DLLVM_BUILD_LLVM_DYLIB=ON
    -DLLVM_LINK_LLVM_DYLIB=ON
    -DLLVM_INSTALL_UTILS=ON

    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libc;lld"
    # broken for now, seems a sysroot for each target is needed
    #-DLLVM_ENABLE_RUNTIMES=all
    #-DLLVM_RUNTIME_TARGETS="riscv32-unknown-linux-gnu;riscv64-unknown-linux-gnu"
    -DLLVM_INCLUDE_BENCHMARKS=OFF
    -DLLVM_INCLUDE_EXAMPLES=OFF
    -DLLVM_INCLUDE_TESTS=OFF

    # force static linking of non-libc deps for best portability
    # TODO: this seems only used by clang-repl, disable for now because it
    # doesn't seem easy to also link in libbsd.a (cmake errors out with the
    # following)
    #-DLLVM_ENABLE_LIBEDIT=FORCE_ON
    #-DLibEdit_LIBRARIES="${HOST_STATIC_LIB_ROOT}/libedit.a;${HOST_STATIC_LIB_ROOT}/libbsd.a"
    -DLLVM_ENABLE_LIBEDIT=OFF
    # TODO: only useful for Windows manifest functions, it seems, but really painful
    # to properly statically link to; disable for now
    #-DLLVM_ENABLE_LIBXML2=FORCE_ON
    #-DLIBXML2_LIBRARY="${HOST_STATIC_LIB_ROOT}/libxml2.a"
    -DLLVM_ENABLE_LIBXML2=OFF
    -DLLVM_ENABLE_TERMINFO=FORCE_ON
    -DTerminfo_LIBRARIES="${HOST_EXTRA_LIB_ROOT}/libtinfow.a"
    -DLLVM_ENABLE_ZLIB=FORCE_ON
    -DZLIB_LIBRARY="${HOST_EXTRA_LIB_ROOT}/libz.a"
    -DLLVM_ENABLE_ZSTD=FORCE_ON
    -Dzstd_LIBRARY="${HOST_STATIC_LIB_ROOT}/libzstd.a"

    # seems unsupported
    # --with-pkgversion="RuyiSDK $RUYI_DATESTAMP"
)

pushd /tmp
    [[ -e src.tar.xz ]] || wget -O src.tar.xz "$SRC_URI"
popd

mkdir "$SRC_DIR"
pushd "$SRC_DIR"
    tar xf /tmp/src.tar.xz --strip-components=1
popd

mkdir "$TMP/build"
pushd "$TMP/build"
    cmake "${SRC_DIR}/llvm" "${CMAKE_ARGS[@]}"
    ninja
    ninja install
popd

pushd "$INSTALL_ROOT"/..
    tar --zstd -cvf /out/"$P".ruyi-"$RUYI_DATESTAMP"."$ARCH".tar.zst "$INSTALL_ROOT"
popd
