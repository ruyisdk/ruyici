#!/bin/bash

set -e

CONFIG_FILE="$1"
ARCH="$2"

# e.g.:
#
# P="llvm-x.y.z"
# PV="x.y.z"
# RUYI_DATESTAMP=yyyymmdd
# SRC_URI="https://github.com/llvm/llvm-project/releases/download/llvmorg-${PV}/llvm-project-${PV}.src.tar.xz"
source "$CONFIG_FILE"
: "${TAR_STRIP_COMPONENTS:=1}"
: "${USE_MEM:=true}"

echo "P=$P"
echo "PV=$PV"
echo "RUYI_DATESTAMP=$RUYI_DATESTAMP"
echo "SRC_URI=$SRC_URI"
echo "TAR_STRIP_COMPONENTS=$TAR_STRIP_COMPONENTS"
echo "USE_MEM=$USE_MEM"

if "$USE_MEM"; then
    TMP=/tmp/mem  # mounted by outer script
else
    TMP=/tmp
fi

SRC_DIR="${TMP}/llvm-src"
INSTALL_ROOT=${TMP}/prefix/"$P"

HOST_STATIC_LIB_ROOT="/usr/lib/x86_64-linux-gnu"
CFLAGS="-O2 -pipe -fPIC -Wno-error"
CXXFLAGS="$CFLAGS"
CMAKE_EXTRA_ARGS=()
case "$ARCH" in
    amd64)
        HOST_EXTRA_LIB_ROOT="$HOST_STATIC_LIB_ROOT"
        CMAKE_EXTRA_ARGS+=(
            -DCMAKE_C_COMPILER="clang"
            -DCMAKE_CXX_COMPILER="clang++"
            -DCMAKE_C_FLAGS="$CFLAGS"
            -DCMAKE_CXX_FLAGS="$CXXFLAGS"

            -DLLVM_USE_LINKER=lld
            -DLLVM_ENABLE_LTO=Thin

            # TODO: cross-compilation of llvm libc is not without problems
            # see https://github.com/llvm/llvm-project/issues/59504
            -DLLVM_ENABLE_RUNTIMES=libc
            # https://github.com/llvm/llvm-project/issues/147153
            -DLIBC_WNO_ERROR=ON
        )
        ;;

    arm64)
        export QEMU_LD_PREFIX=/sysroot/arm64
        triple=aarch64-linux-gnu
        HOST_EXTRA_LIB_ROOT="/sysroot/${ARCH}/lib/${triple}"

        cat > /tmp/toolchain.cmake <<EOF
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSROOT "${QEMU_LD_PREFIX}")
set(CMAKE_C_COMPILER_TARGET ${triple})
set(CMAKE_CXX_COMPILER_TARGET ${triple})
set(CMAKE_C_FLAGS_INIT "$CFLAGS")
set(CMAKE_CXX_FLAGS_INIT "$CXXFLAGS")
set(CMAKE_LINKER_TYPE LLD)
set(CMAKE_C_COMPILER clang)
set(CMAKE_CXX_COMPILER clang++)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
EOF

        CMAKE_EXTRA_ARGS+=(
            -DCMAKE_TOOLCHAIN_FILE=/tmp/toolchain.cmake
            -DLLVM_HOST_TRIPLE="$triple"
        )
        unset triple
        ;;

    riscv64)
        export QEMU_LD_PREFIX=/sysroot/riscv64
        triple=riscv64-linux-gnu
        HOST_EXTRA_LIB_ROOT="/sysroot/${ARCH}/lib/${triple}"

        cat > /tmp/toolchain.cmake <<EOF
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSROOT "${QEMU_LD_PREFIX}")
set(CMAKE_C_COMPILER_TARGET ${triple})
set(CMAKE_CXX_COMPILER_TARGET ${triple})
set(CMAKE_C_FLAGS_INIT "$CFLAGS")
set(CMAKE_CXX_FLAGS_INIT "$CXXFLAGS")
set(CMAKE_LINKER_TYPE LLD)
set(CMAKE_C_COMPILER clang)
set(CMAKE_CXX_COMPILER clang++)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
EOF

        common_ldflags="-Wl,--as-needed -Wl,--start-group -Wl,-L,${HOST_EXTRA_LIB_ROOT} -Wl,-latomic -Wl,--end-group"
        CMAKE_EXTRA_ARGS+=(
            -DCMAKE_TOOLCHAIN_FILE=/tmp/toolchain.cmake

            #-DCMAKE_EXE_LINKER_FLAGS="$common_ldflags"
            #-DCMAKE_MODULE_LINKER_FLAGS="$common_ldflags"
            #-DCMAKE_SHARED_LINKER_FLAGS="$common_ldflags"

            -DLLVM_HOST_TRIPLE="$triple"
        )
        unset common_ldflags triple
        ;;
esac

CMAKE_ARGS=(
    -G Ninja
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX="$INSTALL_ROOT"
    -DLLVM_PARALLEL_COMPILE_JOBS="$(nproc)"
    -DLLVM_PARALLEL_LINK_JOBS=4
    -DLLVM_SOURCE_PREFIX="$SRC_DIR"
    -DLLVM_USE_RELATIVE_PATHS_IN_FILES=ON
    -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO=ON

    -DLLVM_BUILD_LLVM_DYLIB=ON
    -DLLVM_LINK_LLVM_DYLIB=ON
    -DLLVM_INSTALL_UTILS=ON

    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld"
    # broken for now, seems a sysroot for each target is needed
    #-DLLVM_ENABLE_RUNTIMES=all
    #-DLLVM_RUNTIME_TARGETS="riscv32-unknown-linux-gnu;riscv64-unknown-linux-gnu"
    -DLLVM_INCLUDE_BENCHMARKS=OFF
    -DLLVM_INCLUDE_EXAMPLES=OFF
    -DLLVM_INCLUDE_TESTS=OFF

    # force static linking of non-libc deps for best portability
    # TODO: this seems only used by clang-repl, disable for now because it
    # doesn't seem easy to also link in libbsd.a (cmake errors out with the
    # following)
    #-DLLVM_ENABLE_LIBEDIT=FORCE_ON
    #-DLibEdit_LIBRARIES="${HOST_STATIC_LIB_ROOT}/libedit.a;${HOST_STATIC_LIB_ROOT}/libbsd.a"
    -DLLVM_ENABLE_LIBEDIT=OFF
    # TODO: only useful for Windows manifest functions, it seems, but really painful
    # to properly statically link to; disable for now
    #-DLLVM_ENABLE_LIBXML2=FORCE_ON
    #-DLIBXML2_LIBRARY="${HOST_STATIC_LIB_ROOT}/libxml2.a"
    -DLLVM_ENABLE_LIBXML2=OFF
    #-DLLVM_ENABLE_TERMINFO=FORCE_ON
    #-DTerminfo_LIBRARIES="${HOST_EXTRA_LIB_ROOT}/libtinfo.a"
    -DLLVM_ENABLE_TERMINFO=OFF  # TODO: PIC link failures; check later
    #-DLLVM_ENABLE_ZLIB=FORCE_ON
    #-DZLIB_LIBRARY="${HOST_EXTRA_LIB_ROOT}/libz.a"
    -DLLVM_ENABLE_ZLIB=OFF  # TODO: PIC link failures; check later
    -DLLVM_ENABLE_ZSTD=FORCE_ON
    -Dzstd_LIBRARY="${HOST_EXTRA_LIB_ROOT}/libzstd.a"
)

if [[ -n $LLVM_VENDOR ]]; then
    CMAKE_ARGS+=( -DPACKAGE_VENDOR="$LLVM_VENDOR" )
fi
if [[ -n $CLANG_REPOSITORY_STRING ]]; then
    CMAKE_ARGS+=( -DCLANG_REPOSITORY_STRING="$CLANG_REPOSITORY_STRING" )
fi
if [[ -n $CLANG_VENDOR ]]; then
    CMAKE_ARGS+=( -DCLANG_VENDOR="$CLANG_VENDOR" )
fi
if [[ -n $BUG_REPORT_URL ]]; then
    CMAKE_ARGS+=( -DBUG_REPORT_URL="$BUG_REPORT_URL" )
fi

CMAKE_ARGS+=( "${CMAKE_EXTRA_ARGS[@]}" )

pushd /tmp
    [[ -e src.tar.xz ]] || wget -O src.tar.xz "$SRC_URI"
popd

mkdir "$SRC_DIR"
pushd "$SRC_DIR"
    tar xf /tmp/src.tar.xz --strip-components="${TAR_STRIP_COMPONENTS:=1}"
    ls -l
popd

mkdir "$TMP/build"
pushd "$TMP/build"
    cmake "${SRC_DIR}/llvm" "${CMAKE_ARGS[@]}"
    ninja
    ninja install
popd

pushd "$INSTALL_ROOT"/..
    tar --zstd -cvf /out/"$P".ruyi-"$RUYI_DATESTAMP"."$ARCH".tar.zst "./$P"
popd
